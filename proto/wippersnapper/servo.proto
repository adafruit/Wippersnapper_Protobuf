// SPDX-FileCopyrightText: 2022-2024 Brent Rubell for Adafruit Industries
// SPDX-License-Identifier: MIT
syntax = "proto3";
package wippersnapper.servo;
import "i2c.proto";

/**
* ServoAdd represents a request to attach a servo to a pin.
*/
message ServoAdd {
  string servo_pin                                          = 1; /** The name of pin to attach a servo to. */
  int32 servo_freq                                          = 2; /** The overall PWM frequency, default sent by Adafruit IO is 50Hz. **/
  int32 min_pulse_width                                     = 3; /** The minimum pulse length in uS. Default sent by Adafruit IO is 500uS. **/
  int32 max_pulse_width                                     = 4; /** The maximum pulse length in uS. Default sent by Adafruit IO is 2500uS. **/
  optional wippersnapper.i2c.I2cDeviceDescriptor i2c_device = 5; /** The I2C device/mux's address and related metadata. */
}

/**
* ServoAdded represents the result of attaching a servo to a pin.
*/
message ServoAdded {
  bool attach_success                                       = 1; /** True if a servo was attached successfully, False otherwise. **/
  string servo_pin                                          = 2; /** The name of pin we're responding about. */
  optional wippersnapper.i2c.I2cDeviceDescriptor i2c_device = 3; /** The I2C device/mux's address and related metadata. */
}

/**
* ServoRemove represents a request to detach a servo from a pin and de-initialize the pin for other uses.
*/
message ServoRemove {
  string servo_pin                                          = 1; /** The name of pin to use as a servo pin. */
  optional wippersnapper.i2c.I2cDeviceDescriptor i2c_device = 2; /** The I2C device/mux's address and related metadata. */
}

/**
* ServoWrite represents a message to write the servo's position.
*
* NOTE: Position is sent from Adafruit IO as a pulse width in uS between 0uS
* and 2500uS. The client application must convert pulse width to duty cycle w/fixed
* freq of 50Hz prior to writing to the servo pin.
*/
message ServoWrite {
  string servo_pin                                          = 1; /** The name of pin we're addressing. */
  int32  pulse_width                                        = 2; /** The pulse width to write to the servo, in uS **/
  optional wippersnapper.i2c.I2cDeviceDescriptor i2c_device = 3; /** The I2C device/mux's address and related metadata. */
}
