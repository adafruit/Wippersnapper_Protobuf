// SPDX-FileCopyrightText: 2020-2023 Brent Rubell, Loren Norman for Adafruit Industries
// SPDX-License-Identifier: MIT
syntax = "proto3";
package wippersnapper.signal;
import "nanopb/nanopb.proto";

import "wippersnapper/analogio.proto";
import "wippersnapper/checkin.proto";
import "wippersnapper/digitalio.proto";
import "wippersnapper/ds18x20.proto";
import "wippersnapper/error.proto";
import "wippersnapper/i2c.proto";
import "wippersnapper/pixels.proto";
import "wippersnapper/pwm.proto";
import "wippersnapper/servo.proto";
import "wippersnapper/uart.proto";

/*
 * BrokerToDevice
 * The BrokerToDevice message is sent from the broker to the device.
 * It contains a oneof payload, which is a union of all the possible
 * messages that can be sent from the broker to a device.
 */
message BrokerToDevice {
  oneof payload {
    // digitalio.proto
    wippersnapper.digitalio.DigitalIOAdd digitalio_add = 10;
    wippersnapper.digitalio.DigitalIORemove digitalio_remove = 11;
    wippersnapper.digitalio.DigitalIOEvent digitalio_event = 12;
    // analogio.proto
    wippersnapper.analogio.AnalogIOAdd analogio_add = 20;
    wippersnapper.analogio.AnalogIOAdd analogio_remove = 21;
    // checkin.proto
    wippersnapper.checkin.CheckinRequest checkin_request = 30;
    // servo.proto
    wippersnapper.servo.ServoAdd servo_add = 40;
    wippersnapper.servo.ServoRemove servo_remove = 41;
    wippersnapper.servo.ServoWrite servo_write   = 42;
    // pwm.proto
    wippersnapper.pwm.PWMAdd pwm_add                        = 50;
    wippersnapper.pwm.PWMRemove pwm_remove                        = 51;
    wippersnapper.pwm.PWMWriteDutyCycle pwm_write_duty            = 52;
    wippersnapper.pwm.PWMWriteDutyCycleMulti pwm_write_duty_multi = 53;
    wippersnapper.pwm.PWMWriteFrequency pwm_write_freq            = 54;
    // pixels.proto
    wippersnapper.pixels.PixelsAdd pixels_add = 60;
    wippersnapper.pixels.PixelsRemove pixels_remove = 61;
    wippersnapper.pixels.PixelsWrite pixels_write   = 62;
    // ds18x20.proto
    wippersnapper.ds18x20.Ds18x20Add ds18x20_add     = 70;
    wippersnapper.ds18x20.Ds18x20Remove ds18x20_remove = 71;
    // uart.proto
    wippersnapper.uart.UARTAdd uart_add = 80;
    wippersnapper.uart.UARTRemove uart_remove = 81;
    // i2c.proto
    wippersnapper.i2c.I2CScan i2c_scan = 90;
    wippersnapper.i2c.I2CInit i2c_add = 91;
    wippersnapper.i2c.I2CRemove i2c_remove = 92;
    // error.proto
    wippersnapper.error.Error error = 100;
  }
}

/*
 * DeviceToBroker
 * The DeviceToBroker message is sent from the device to the broker.
 * It contains a oneof payload, which is a union of all the possible
 * messages that can be sent from a device to the broker.
 */
message DeviceToBroker {
  option (nanopb_msgopt).submsg_callback = true;
  oneof payload {
    //digitalio.proto
    wippersnapper.digitalio.DigitalIOEvent digitalio_event = 10;
    // analogio.proto
    wippersnapper.analogio.AnalogIOEvent analogio_event = 20;
    // checkin.proto
    wippersnapper.checkin.CheckinResponse checkin_response = 30;
    // servo.proto
    wippersnapper.servo.ServoAdded servo_added = 40;
    // pwm.proto
    wippersnapper.pwm.PWMAdded pwm_added = 50;
    // pixels.proto
    wippersnapper.pixels.PixelsAdded pixels_added = 60;
    // ds18x20.proto
    wippersnapper.ds18x20.Ds18x20Added ds18x20_added = 70;
    wippersnapper.ds18x20.Ds18x20Event ds18x20_event = 80;
    // uart.proto
    wippersnapper.uart.UARTAdded uart_added = 90;
    wippersnapper.uart.UARTEvent uart_event = 100;
    // i2c.proto
    wippersnapper.i2c.I2CScanResponse resp_i2c_scan  = 110;
    wippersnapper.i2c.I2CAdded i2c_added        = 111;
    wippersnapper.i2c.I2CRemoved i2c_removed    = 112;
    wippersnapper.i2c.I2CEvent i2c_event  = 113;
  }
}