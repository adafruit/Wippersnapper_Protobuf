// SPDX-FileCopyrightText: 2021-2024 Brent Rubell for Adafruit Industries
// SPDX-License-Identifier: MIT
syntax = "proto3";
package wippersnapper.i2c;
import "sensor.proto";

/**
* I2cBusStatus represents the status of a board's I2C bus
*/
enum I2cBusStatus {
  I2C_BUS_STATUS_UNSPECIFIED   = 0; /** Unspecified error occurred. **/
  I2C_BUS_STATUS_SUCCESS       = 1; /** I2C bus successfully initialized. **/
  I2C_BUS_STATUS_ERROR_HANG    = 2; /** I2C Bus hang, user should reset their board if this persists. **/
  I2C_BUS_STATUS_ERROR_PULLUPS = 3; /** I2C bus failed to initialize - SDA or SCL needs a pull up. **/
  I2C_BUS_STATUS_ERROR_WIRING  = 4; /** I2C bus failed to communicate - Please check your wiring. **/
}

/**
* I2cDeviceStatus represents the state of an I2C device/peripheral
*/
enum I2cDeviceStatus {
  I2C_DEVICE_STATUS_UNSPECIFIED           	= 0; /** Unspecified error occurred. **/
  I2C_DEVICE_STATUS_SUCCESS       			= 1; /** I2C device successfully initialized. **/
  I2C_DEVICE_STATUS_FAIL_INIT      			= 2; /** I2C device failed to initialize. **/
  I2C_DEVICE_STATUS_FAIL_DEINIT				= 3; /** I2C device failed to deinitialize. **/
  I2C_DEVICE_STATUS_FAIL_UNSUPPORTED_SENSOR = 4; /** WipperSnapper version is outdated and does not include this device. **/
  I2C_DEVICE_STATUS_NOT_FOUND				= 5; /** I2C device not found on the bus. **/
}

/**
* I2cBusScan represents a command for a device to perform an i2c scan. It is an empty message.
*/
message I2cBusScan {
}

/**
* I2cBusScanned represents a list of I2c addresses
* found on the bus after I2cScan has executed.
*/
message I2cBusScanned {
  repeated uint32 i2c_bus_found_addresses = 1 [packed=true]; /** The 7-bit addresses of the I2c devices found on the bus, empty if not found. */
  I2cBusStatus i2c_bus_status             = 2; /** The I2c bus' status. **/
}

// DEVICE COMMANDS

/**
* I2cDeviceAddOrReplace is a message for initializing (or replacing/updating) an i2c device.
*/
message I2cDeviceAddOrReplace {
  uint32 i2c_device_address                                         = 1; /** The 7-bit I2c address of the device on the bus. */
  string i2c_device_name                                            = 2; /** The I2c device's name, MUST MATCH the name on the JSON definition file on
                                                                     https://github.com/adafruit/Wippersnapper_Components. */
  float i2c_device_period                                           = 3; /** The desired period to update the I2c device's sensor(s), in seconds. */
  repeated wippersnapper.sensor.SensorType i2c_device_sensor_types  = 4; /** SI Types for each sensor on the I2c device. */
}

/**
* I2cDeviceAddedOrReplaced contains the response from a device after processing a I2cDeviceAddOrReplace message.
*/
message I2cDeviceAddedOrReplaced {
  uint32 i2c_device_address         = 1; /** The 7-bit I2c address of the device on the bus. */
  I2cBusStatus i2c_bus_status       = 2; /** The I2c bus' status. **/
  I2cDeviceStatus i2c_device_status = 3; /** The I2c device's status. **/
}

/**
* I2cDeviceRemove represents a request to de-init an i2c device.
*/
message I2cDeviceRemove {
  uint32 i2c_device_address = 1; /** The 7-bit I2c address of the device on the bus. */
}

/**
* I2cDeviceRemoved represents a response to a I2cDeviceRemove message.
*/
message I2cDeviceRemoved {
  uint32 i2c_device_address			= 1; /** The 7-bit I2c address of the device which was initialized. */
  I2cBusStatus i2c_bus_status		= 2; /** The I2c bus' status. **/
  I2cDeviceStatus i2c_device_status = 3; /** The I2c device's status. **/
}

/**
* Each I2cDeviceEvent represents data from **one** I2c sensor.
* NOTE: An I2cDeviceEvent can have multiple sensor events if
* the I2c device contains > 1 sensor.
*/
message I2cDeviceEvent {
  uint32 i2c_device_address 								  = 1; /** The 7-bit I2c address of the I2c device. */
  repeated wippersnapper.sensor.SensorEvent i2c_device_events = 2; /** A, optionally repeated, SensorEvent from a sensor. */
}
