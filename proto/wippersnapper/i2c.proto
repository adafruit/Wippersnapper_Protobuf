// SPDX-FileCopyrightText: 2021-2024 Brent Rubell for Adafruit Industries
// SPDX-License-Identifier: MIT
syntax = "proto3";
package wippersnapper.i2c;
import "sensor.proto";

/**
* I2cBusResp represents the state of a board's I2C bus
*/
enum I2cBusResp {
  I2C_BUS_RESP_UNSPECIFIED         = 0; /** Unspecified error occurred. **/
  I2C_BUS_RESP_SUCCESS             = 1; /** I2C bus successfully initialized. **/
  I2C_BUS_RESP_ERROR_HANG          = 2; /** I2C Bus hang, user should reset their board if this persists. **/
  I2C_BUS_RESP_ERROR_PULLUPS       = 3; /** I2C bus failed to initialize - SDA or SCL needs a pull up. **/
  I2C_BUS_RESP_ERROR_WIRING        = 4; /** I2C bus failed to communicate - Please check your wiring. **/
}

/**
* I2cDeviceResp represents the state of an I2C device/peripheral
*/
enum I2cDeviceResp {
  I2C_DEVICE_RESP_UNSPECIFIED           	= 0; /** Unspecified error occurred. **/
  I2C_DEVICE_RESP_SUCCESS       			= 1; /** I2C device successfully initialized. **/
  I2C_DEVICE_RESP_FAIL_INIT      			= 2; /** I2C device failed to initialize. **/
  I2C_DEVICE_RESP_FAIL_DEINIT				= 3; /** I2C device failed to deinitialize. **/
  I2C_DEVICE_RESP_FAIL_UNSUPPORTED_SENSOR   = 4; /** WipperSnapper version is outdated and does not include this device. **/
  I2C_DEVICE_RESP_NOT_FOUND				    = 5; /** I2C device not found on the bus. **/
}

/**
* I2CBusScan represents a command for a device to perform an i2c scan. It is an empty message.
*/
message I2CBusScan {
}

/**
* I2CBusScanResponse represents a list of I2C addresses
* found on the bus after I2CScan has executed.
*/
message I2CBusScanResponse {
  repeated uint32 found_addresses = 1 [packed=true]; /** The 7-bit addresses of the I2C devices found on the bus, empty if not found. */
  I2cBusResp bus_response     = 2; /** The I2C bus' status. **/
}

// DEVICE COMMANDS

/**
* I2CDeviceAddOrReplace is a message for initializing (or replacing/updating) an i2c device.
*/
message I2CDeviceAddOrReplace {
  uint32 address                                         = 1; /** The 7-bit I2C address of the device on the bus. */
  string name                                            = 2; /** The I2C device's name, MUST MATCH the name on the JSON definition file on
                                                                     https://github.com/adafruit/Wippersnapper_Components. */
  float period                                           = 3; /** The desired period to update the I2C device's sensor(s), in seconds. */
  repeated wippersnapper.sensor.SensorType sensor_types  = 4; /** SI Types for each sensor on the I2C device. */
}

/**
* I2CDeviceAddedOrReplaced contains the response from a device after processing a I2CDeviceAddOrReplace message.
*/
message I2CDeviceAddedOrReplaced {
  uint32 i2c_device_address   	    = 1; /** The 7-bit I2C address of the device on the bus. */
  I2cBusResp bus_response       = 2; /** The I2C bus' status. **/
  I2cDeviceResp device_response = 3; /** The I2C device's status. **/
}

/**
* I2CDeviceRemove represents a request to de-init an i2c device.
*/
message I2CDeviceRemove {
  uint32 i2c_device_address = 1; /** The 7-bit I2C address of the device on the bus. */
}

/**
* I2CDeviceRemoved represents a response to a I2CDeviceRemove message.
*/
message I2CDeviceRemoved {
  uint32 i2c_device_address		    = 1; /** The 7-bit I2C address of the device which was initialized. */
  I2cBusResp bus_response       = 2; /** The I2C bus' status. **/
  I2cDeviceResp device_response = 3; /** The I2C device's status. **/
}

/**
* Each I2CDeviceEvent represents data from **one** I2C sensor.
* NOTE: An I2CDeviceEvent can have multiple sensor events if
* the I2C device contains > 1 sensor.
*/
message I2CDeviceEvent {
  uint32 sensor_address                                       = 1; /** The 7-bit I2C address of the I2C device. */
  repeated wippersnapper.sensor.SensorEvent sensor_events     = 2; /** A, optionally repeated, SensorEvent from a sensor. */
}
