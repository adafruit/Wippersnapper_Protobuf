// SPDX-FileCopyrightText: 2022 Brent Rubell for Adafruit Industries
// SPDX-License-Identifier: MIT
// Addressable Pixel API for WipperSnapper
// based off Adafruit BLE's Addressable Pixel Service (https://github.com/adafruit/bluetooth-low-energy#addressable-pixel-service---0x0900)
syntax = "proto3";

package wippersnapper.pixels.v1;

/**
* PixelsCreate creates a pixel object.
*/
message PixelsCreate {
  uint32 pixel_num            = 1; /** The number of pixels in strand. */
  uint32 pixel_brightness     = 2; /** Pixel's Brightness setting. 0=minimum (off), 255=brightest. */
  NeoPixelInit neo_pixel_init = 3; /** Data used by the NeoPixel constructor. **/
  DotStarInit dot_star_init   = 4; /** Data used by the DotStar constructor. **/
}

/**
* PixelsUpdate updates the configuration of a pixel object.
*/
message PixelsUpdate {
  uint32 pixel_brightness       = 1; /** Pixel's Brightness setting. 0=minimum (off), 255=brightest. */
  NeoPixelInit neo_pixel_config = 2; /** Data used by the NeoPixel object. **/
  DotStarInit dot_star_config   = 3; /** Data used by the DotStar object. **/
}

/**
* PixelsDelete deletes and de-allocates a pixel object.
*/
message PixelsDelete {
  NeoPixelInit neo_pixel_config = 1; /** Data used by the NeoPixel object. **/
  DotStarInit dot_star_config   = 2; /** Data used by the DotStar object. **/
}

/**
* PixelsFillAll fills all of a strip with one color.
*/
message PixelsFillAll {
  uint32 color = 1;                  /** 32-bit color value. Most significant byte is white (for RGBW pixels) or ignored (for RGB pixels), next is red, then green, and least significant byte is blue. If all arguments are unspecified, this will be 0 (off). */
  NeoPixelInit neo_pixel_config = 2; /** Data used by the NeoPixel object. **/
  DotStarInit dot_star_config = 3;   /** Data used by the DotStar object. **/
}

/**
* DotStar constructor.
*/
message DotStarInit {
  bool   use_hardware_spi = 1; /** Execute DotStar constructor for hardware SPI, must be connected to MOSI, SCK pins. */
  uint32 pin_data         = 2; /** Arduino pin for data out, DotStar Software SPI. **/
  uint32 pin_clock        = 3; /** Arduino pin for clock out, DotStar Software SPI. **/
}

/**
* NeoPixel wiring types, used by NeoPixel constructor.
*/
enum NeoPixelType {
  NEO_PIXEL_TYPE_UNSPECIFIED = 0; /** Pixel type is unspecified. */
  NEO_PIXEL_TYPE_RGB         = 1; /** Pixels are wired for RGB bitstream. (v1 FLORA pixels). */
  NEO_PIXEL_TYPE_GRB         = 2; /** Pixels are wired for GRB bitstream (most NeoPixel products). */
  NEO_PIXEL_TYPE_RGBW        = 3; /** Pixel sare wired for RGBW bitstream (NeoPixel RGBW products). */
}

/**
* NeoPixel bitstream speed, used by NeoPixel constructor.
*/
enum NeoPixelSpeed {
  NEO_PIXEL_SPEED_UNSPECIFIED = 0; /** Pixel speed is unspecified. */
  NEO_PIXEL_SPEED_KHZ800      = 1; /** 800KHz bitstream (most NeoPixel products w/WS2812 LEDs). */
  NEO_PIXEL_SPEED_KHZ400      = 2; /** 400KHz bitstream (classic "v1" FLORA pixels, WS2811 drivers). */
}

/**
* NeoPixel constructor.
*/
message NeoPixelInit {
  uint32 neo_pixel_pin          = 1; /** The pin to send NeoPixel data out on. **/
  NeoPixelType  neo_pixel_type  = 2; /** NeoPixel wiring order. **/
  NeoPixelSpeed neo_pixel_speed = 3; /** NeoPixel speed. **/
}