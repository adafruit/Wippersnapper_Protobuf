// SPDX-FileCopyrightText: 2020-2021 Brent Rubell for Adafruit Industries
// SPDX-License-Identifier: MIT
syntax = "proto3";

package wippersnapper.signal.v1;

// Non-WipperSnapper
import "nanopb/nanopb.proto";// WipperSnapper
import "wippersnapper/description/v1/description.proto";
import "wippersnapper/pin/v1/pin.proto";
import "wippersnapper/i2c/v1/i2c.proto";
import "wippersnapper/servo/v1/servo.proto";
import "wippersnapper/pwm/v1/pwm.proto";
import "wippersnapper/ds18x20/v1/ds18x20.proto";
import "wippersnapper/pixels/v1/pixels.proto";
import "wippersnapper/uart/v1/uart.proto";


message BrokerToDevice {
  option (nanopb_msgopt).submsg_callback = true;
  oneof payload {
    // TODO: Leaving pin.proto out as it'll be refactored
    // TODO: try "add/remove"
    // description.proto
    wippersnapper.description.v1.CreateDescription create_description = 1;
    // servo.proto
    wippersnapper.servo.v1.ServoAttach servo_attach = 1;
    wippersnapper.servo.v1.ServoDetach servo_detach = 2;
    wippersnapper.servo.v1.ServoWrite servo_write   = 3;
    // pwm.proto
    wippersnapper.pwm.v1.PWMAttach pwm_attach                        = 2;
    wippersnapper.pwm.v1.PWMDetach pwm_detach                        = 3;
    wippersnapper.pwm.v1.PWMWriteDutyCycle pwm_write_duty            = 4;
    wippersnapper.pwm.v1.PWMWriteDutyCycleMulti pwm_write_duty_multi = 5;
    wippersnapper.pwm.v1.PWMWriteFrequency pwm_write_freq            = 6;
    // pixels.proto
    wippersnapper.pixels.v1.PixelsCreate pixels_create = 7;
    wippersnapper.pixels.v1.PixelsDelete pixels_delete = 8;
    wippersnapper.pixels.v1.PixelsWrite pixels_write   = 9;
    // ds18x20.proto
    wippersnapper.ds18x20.v1.Ds18x20Init ds18x20_init     = 10;
    wippersnapper.ds18x20.v1.Ds18x20DeInit ds18x20_deinit = 11;
    // uart.proto
    wippersnapper.uart.v1.UARTDeviceAttach uart_device_attach = 1;
    // TODO: add uart detach once merged into master
    // i2c.proto
    wippersnapper.i2c.v1.I2CScan i2c_scan = 2;
    wippersnapper.i2c.v1.I2CInits i2c_inits = 7;
    wippersnapper.i2c.v1.I2CDeinit i2c_deinit = 5;
  }
}

message DeviceToBroker {
  option (nanopb_msgopt).submsg_callback = true;
}



message CreateSignalRequest {
  option (nanopb_msgopt).submsg_callback = true;
  oneof payload {
    // Create, update or remove a GPIO pin
    wippersnapper.pin.v1.ConfigurePinRequests pin_configs               = 6;
    // Update a pins state
    wippersnapper.pin.v1.PinEvent pin_event                             = 15;
    // Update a pin's state
    wippersnapper.pin.v1.PinEvents pin_events                           = 7;
  }
}

/**
* Response from a signal message payload (device->broker)
*/
message SignalResponse {
  oneof payload {
    bool configuration_complete = 1; /** True if a device successfully completed a ConfigurePinRequests message, False otherwise. */
  }
}


/**
* UARTResponse represents a UART command from a device.
*/
message UARTResponse {
  option (nanopb_msgopt).submsg_callback = true;
  oneof payload {
    wippersnapper.uart.v1.UARTDeviceAttachResponse resp_uart_device_attach = 1;
    wippersnapper.uart.v1.UARTDeviceEvent resp_uart_device_event           = 2;
  }
}


/**
* Ds18x20Response represents a Ds18x20 message from the device.
*/
message Ds18x20Response {
  option (nanopb_msgopt).submsg_callback = true;
  oneof payload {
    wippersnapper.ds18x20.v1.Ds18x20InitResponse resp_ds18x20_init      = 1;
    wippersnapper.ds18x20.v1.Ds18x20DeviceEvent  resp_ds18x20_event     = 2;
  }
}



/**
* I2CResponse represents the device's response to an I2C-specific message from IO.
*/
message I2CResponse {
  option (nanopb_msgopt).submsg_callback = true;
  oneof payload {
    wippersnapper.i2c.v1.I2CBusInitResponse resp_i2c_init                  = 1 [deprecated = true, (nanopb).type = FT_IGNORE];
    wippersnapper.i2c.v1.I2CScanResponse resp_i2c_scan                  = 2;
    wippersnapper.i2c.v1.I2CDeviceInitResponse resp_i2c_device_init        = 3;
    wippersnapper.i2c.v1.I2CDeviceDeinitResponse resp_i2c_device_deinit    = 4;
    wippersnapper.i2c.v1.I2CDeviceUpdateResponse resp_i2c_device_update    = 5;
    wippersnapper.i2c.v1.I2CDeviceEvent resp_i2c_device_event              = 6;
  }
}



/**
* ServoResponse represents the device's response across the servo sub-topic.
*/
message ServoResponse {
  option (nanopb_msgopt).submsg_callback = true;
  oneof payload {
    wippersnapper.servo.v1.ServoAttachResponse servo_attach_resp = 1;
  }
}


message PixelsResponse {
  option (nanopb_msgopt).submsg_callback = true;
  oneof payload {
    wippersnapper.pixels.v1.PixelsCreateResponse resp_pixels_create = 1;
  }
}



/**
* PWMRequest represents a devices's response across the PWM sub-topic.
*/
message PWMResponse {
  option (nanopb_msgopt).submsg_callback = true;
  oneof payload {
    wippersnapper.pwm.v1.PWMAttachResponse attach_response = 1;
  }
}
