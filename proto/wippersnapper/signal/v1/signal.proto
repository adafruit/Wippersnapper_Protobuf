// SPDX-FileCopyrightText: 2020-2021 Brent Rubell for Adafruit Industries
// SPDX-License-Identifier: MIT
syntax = "proto3";

package wippersnapper.signal.v1;

// Non-WipperSnapper
import "nanopb/nanopb.proto";

// WipperSnapper
import "wippersnapper/pin/v1/pin.proto";
import "wippersnapper/i2c/v1/i2c.proto";
import "wippersnapper/pixels/v1/pixels.proto";

/**
* I2CRequest represents the broker's request for a specific i2c command to a device.
*/
message I2CRequest {
  option (nanopb_msgopt).submsg_callback = true;
  oneof payload {
    wippersnapper.i2c.v1.I2CBusInitRequest req_i2c_init                     = 1 [deprecated = true, (nanopb).type = FT_IGNORE];
    wippersnapper.i2c.v1.I2CBusScanRequest req_i2c_scan                     = 2;
    wippersnapper.i2c.v1.I2CBusSetFrequency req_i2c_set_freq                = 3;
    wippersnapper.i2c.v1.I2CDeviceInitRequest req_i2c_device_init           = 4;
    wippersnapper.i2c.v1.I2CDeviceDeinitRequest req_i2c_device_deinit       = 5;
    wippersnapper.i2c.v1.I2CDeviceUpdateRequest req_i2c_device_update       = 6;
    wippersnapper.i2c.v1.I2CDeviceInitRequests req_i2c_device_init_requests = 7;
  }
}

/**
* I2CResponse represents the device's response to an I2C-specific message from IO.
*/
message I2CResponse {
  option (nanopb_msgopt).submsg_callback = true;
  oneof payload {
    wippersnapper.i2c.v1.I2CBusInitResponse resp_i2c_init                  = 1 [deprecated = true, (nanopb).type = FT_IGNORE];
    wippersnapper.i2c.v1.I2CBusScanResponse resp_i2c_scan                  = 2;
    wippersnapper.i2c.v1.I2CDeviceInitResponse resp_i2c_device_init        = 3;
    wippersnapper.i2c.v1.I2CDeviceDeinitResponse resp_i2c_device_deinit    = 4;
    wippersnapper.i2c.v1.I2CDeviceUpdateResponse resp_i2c_device_update    = 5;
    wippersnapper.i2c.v1.I2CDeviceEvent resp_i2c_device_event              = 6;
  }
}

/**
* PixelRequest represents messages sent to the device from a pixel component.
*/
message PixelRequest {
  option (nanopb_msgopt).submsg_callback = true;
  oneof payload {
    wippersnapper.pixels.v1.PixelsCreate req_pixels_create    = 1;
    wippersnapper.pixels.v1.PixelsUpdate req_pixels_update    = 2;
    wippersnapper.pixels.v1.PixelsDelete req_pixels_delete    = 3;
    wippersnapper.pixels.v1.PixelsFillAll req_pixels_fill_all = 4;
  }
}

message CreateSignalRequest {
  option (nanopb_msgopt).submsg_callback = true;
  oneof payload {
    // Create, update or remove a GPIO pin
    wippersnapper.pin.v1.ConfigurePinRequests pin_configs               = 6;
    // Update a pins state
    wippersnapper.pin.v1.PinEvent pin_event                             = 15;
    // Create, update or remove a PWM output pin
    wippersnapper.pin.v1.ConfigurePWMPinRequests pwm_pin_config         = 10;
    // Write duty cycle to a PWM output pin
    wippersnapper.pin.v1.PWMPinEvents pwm_pin_event                     = 12;
    // Update a pin's state
    wippersnapper.pin.v1.PinEvents pin_events                           = 7;
  }
}

/**
* Response from a signal message payload (device->broker)
*/
message SignalResponse {
  oneof payload {
    bool configuration_complete = 1; /** True if a device successfully completed a ConfigurePinRequests message, False otherwise. */
  }
}