// SPDX-FileCopyrightText: 2021 Brent Rubell for Adafruit Industries
// SPDX-License-Identifier: MIT
syntax = "proto3";

package wippersnapper.i2c.v1;
import "nanopb/nanopb.proto";

/**
* BusResponse represents the I2C bus status.
*/
enum BusResponse {
  BUS_RESPONSE_UNSPECIFIED   = 0; /** Unspecified error occurred. **/
  BUS_RESPONSE_SUCCESS       = 1; /** I2C bus successfully initialized. **/
  BUS_RESPONSE_ERROR_HANG    = 2; /** I2C Bus hang, user should reset their board if this persists. **/
  BUS_RESPONSE_ERROR_PULLUPS = 3; /** I2C bus failed to initialize - SDA or SCL needs a pull up. **/
  BUS_RESPONSE_ERROR_WIRING  = 4; /** I2C bus failed to communicate - Please check your wiring. **/
}

/**
* I2CBusInitRequest represents a request to
* initialize the I2C bus.
*/
message I2CBusInitRequest {
  oneof i2c_pin_scl {
    int32  i2c_pin_scl   = 1; /** The desired I2C SCL pin. */
    string s_i2c_pin_scl = 5; /** The desired I2C SCL pin, as a string (for CPython/Blinka)*/
  }
  oneof i2c_pin_sda {
    int32   i2c_pin_sda   = 2; /** The desired I2C SDA pin. */
    string  s_i2c_pin_sda = 6; /** The desired I2C SDA pin, as a string (for CPython/Blinka)*/
  } 
  uint32 i2c_frequency   = 3; /** The desired I2C bus frequency, in Hz. Default is 100000Hz. */
  int32  i2c_port_number = 4; /** The I2C port number. */
}

/**
* I2CBusInitResponse represents a response to I2CBusInitRequest
*/
message I2CBusInitResponse {
  bool is_initialized  = 1 [deprecated = true, (nanopb).type = FT_IGNORE]; /** True if the I2C port has been initialized successfully, False otherwise. */
  BusResponse bus_response = 2; /** Whether the I2C bus initialized properly or failed. **/
}

/**
* I2CBusSetFrequency represents a request to change the
* I2C clock speed to a desired frequency, in Hz.
*/
message I2CBusSetFrequency {
  uint32 frequency = 1; /** The desired I2C SCL frequency, in Hz. */
  int32 bus_id     = 2; /** An optional I2C bus identifier, if multiple exist. */
}

/**
* I2CBusScanRequest represents the parameters required to execute
* a device's I2C scan.
*/
message I2CBusScanRequest {
  int32 i2c_port_number              = 1; /** The desired I2C port to scan. */
  I2CBusInitRequest bus_init_request = 2; /** The I2C bus initialization request. */
}

/**
* I2CBusScanResponse represents a list of I2C addresses
* found on the bus after I2CBusScanRequest has executed.
*/
message I2CBusScanResponse {
  repeated uint32 addresses_found  = 1 [packed=true, (nanopb).max_count = 120]; /** The 7-bit addresses of the I2C devices found on the bus, empty if not found. */
    BusResponse bus_response       = 2; /** The I2C bus' status. **/
}

/**
* I2CDeviceInitRequest is a wrapper message containing
* an i2c-device-specific initialization request.
*/
message I2CDeviceInitRequest {
  int32  i2c_port_number             = 1; /** The desired I2C port to initialize an I2C device on. */
  uint32 i2c_address                 = 2; /** The 7-bit I2C address of the device on the bus. */
  I2CBusInitRequest bus_init_request = 3; /** An I2C bus initialization request. */
  AHTUpdateRequest aht               = 4; /** A request to configure an AHTX0 sensor. */
  DPS310UpdateRequest dps            = 5; /** A request to configure a DPS310 sensor. */
  SCD30UpdateRequest scd30           = 6; /** A request to initialize a SCD-30 sensor. */
}

/**
* I2CDeviceInitResponse represents if an i2c device
* is successfully initialized by the client.
*/
message I2CDeviceInitResponse {
    bool is_success             = 1; /** True if i2c device initialized successfully, false otherwise. */
    uint32 i2c_address          = 2; /** The 7-bit I2C address of the device on the bus. */
    BusResponse bus_response    = 3; /** The I2C bus' status. **/
}

/**
* I2CDeviceUpdateRequest is a wrapper message containing
* a update request for a specific i2c device.
*/
message I2CDeviceUpdateRequest {
    int32  i2c_port_number    = 1; /** The desired I2C port. */
    uint32 i2c_address        = 2; /** The 7-bit I2C address of the device on the bus. */
    AHTUpdateRequest aht      = 3; /** A request to update the sensors of an AHTX0 sensor. */
    DPS310UpdateRequest dps   = 4; /** A request to update the sensors of a DPS310 sensor. */
    SCD30UpdateRequest scd30  = 5; /** A request to update the sensors of a SCD-30 sensor. */
}

/**
* I2CDeviceUpdateResponse represents if an I2C device's
* sensor(s) is/are successfully updated.
*/
message I2CDeviceUpdateResponse {
    uint32 i2c_address          = 1; /** The 7-bit I2C address of the device which was updated. */
    bool is_success             = 2; /** True if the update request succeeded, False otherwise. */
    BusResponse bus_response    = 3; /** The I2C bus' status. **/
}

/**
* I2CDeviceDeinitRequest is a wrapper message containing
* a deinitialization request for a specific i2c device.
*/
message I2CDeviceDeinitRequest {
    int32  i2c_port_number        = 1; /** The desired I2C port to de-initialize an I2C device on. */
    uint32 i2c_address            = 2; /** The 7-bit I2C address of the device on the bus. */
}

/**
* I2CDeviceDeinitResponse represents if an I2C device's
* sensor(s) is/are successfully de-initialized.
*/
message I2CDeviceDeinitResponse {
    bool is_success     = 1; /** True if the deinitialization request succeeded, False otherwise. */
    uint32 i2c_address  = 2; /** The 7-bit I2C address of the device which was initialized. */
}

// Device-specific //

/**
* AHTUpdateRequest represents the request to update or configure
* an AHTX0 temperature/humidity sensor.
*/
message AHTUpdateRequest {
  bool enable_temperature  = 1; /** True to enable the temperature sensor, False to disable. */
  float period_temperature = 2; /** Specifies the time between temperature sensor measurements, in seconds. */
  bool enable_humidity     = 3; /** True to enable the humidity sensor, False to disable. */
  float period_humidity    = 4; /** Specifies the time between humidity sensor measurements, in seconds. */
}

/**
* DPS310UpdateRequest represents the request to update or configure
* a DPS310 barometric pressure and altitude sensor.
*/
message DPS310UpdateRequest {
  bool enable_pressure      = 1; /** True to enable the DPS310's pressure sensor, False to disable. */
  float period_pressure     = 2; /** Specifies the time between pressure sensor measurements, in seconds. */
  bool enable_temperature   = 3; /** True to enable the DPS310's temperature sensor, False to disable. */
  float period_temperature  = 4; /** Specifies the time between temperature sensor measurements, in seconds. */
}

/**
* SCD30UpdateRequest represents the request to update or configure
* a SCD-30 NDIR CO2 Temperature and Humidity Sensor.
*/
message SCD30UpdateRequest {
  bool enable_temperature   = 1; /** True to enable the SCD30's temperature sensor, False to disable. */
  float period_temperature  = 2; /** Specifies the time between temperature sensor measurements, in seconds. */
  bool enable_humidity      = 3; /** True to enable the SCD30's humidity sensor, False to disable. */
  float period_humidity     = 4; /** Specifies the time between humidity sensor measurements, in seconds. */
  bool enable_co2           = 5; /** True to enable the SCD30's CO2 sensor, False to disable. */
  float period_co2          = 6; /** Specifies the time between CO2 sensor measurements, in seconds. */
}

/** Adafruit Unified Sensor Library Messages. */

/**
* SensorType allows us determine what types of units the sensor uses, etc.
*/
enum SensorType {
  SENSOR_TYPE_UNSPECIFIED         = 0;
  SENSOR_TYPE_ACCELEROMETER       = 1;
  SENSOR_TYPE_MAGNETIC_FIELD      = 2;
  SENSOR_TYPE_ORIENTATION         = 3;
  SENSOR_TYPE_GYROSCOPE           = 4;
  SENSOR_TYPE_LIGHT               = 5;
  SENSOR_TYPE_PRESSURE            = 6;
  SENSOR_TYPE_PROXIMITY           = 8;
  SENSOR_TYPE_GRAVITY             = 9;
  SENSOR_TYPE_LINEAR_ACCELERATION = 10;
  SENSOR_TYPE_ROTATION_VECTOR     = 11;
  SENSOR_TYPE_RELATIVE_HUMIDITY   = 12;
  SENSOR_TYPE_AMBIENT_TEMPERATURE = 13;
  SENSOR_TYPE_VOLTAGE             = 15;
  SENSOR_TYPE_CURRENT             = 16;
  SENSOR_TYPE_COLOR               = 17;
  SENSOR_TYPE_RAW                 = 18;
}

/**
* SensorEvent  is used to return the sensor's value and type.
*/
message SensorEvent {
  SensorType type = 1; /** The sensor's type and corresponding SI unit */
  float value     = 2; /** The sensor's value */
}

/**
* Each I2CDeviceEvent represents data from **one** I2C sensor.
* NOTE: An I2CDeviceEvent can have multiple sensor events if
* the I2C device contains > 1 sensor.
*/
message I2CDeviceEvent {
  uint32 sensor_address              = 1; /** The 7-bit I2C address of the I2C device. */
  repeated SensorEvent sensor_event  = 2[(nanopb).max_count = 15]; /** A, optionally repeated, SensorEvent from a sensor. */
}