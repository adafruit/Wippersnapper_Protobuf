// SPDX-FileCopyrightText: 2021 Brent Rubell for Adafruit Industries
// SPDX-License-Identifier: MIT
syntax = "proto3";

package wippersnapper.i2c.v1;
import "nanopb/nanopb.proto";
import "wippersnapper/sensor/v1/sensor.proto";

/**
* BusResponse represents the state of the I2C bus, from a device.
*/
enum BusResponse {
  BUS_RESPONSE_UNSPECIFIED         = 0; /** Unspecified error occurred. **/
  BUS_RESPONSE_SUCCESS             = 1; /** I2C bus successfully initialized. **/
  BUS_RESPONSE_ERROR_HANG          = 2; /** I2C Bus hang, user should reset their board if this persists. **/
  BUS_RESPONSE_ERROR_PULLUPS       = 3; /** I2C bus failed to initialize - SDA or SCL needs a pull up. **/
  BUS_RESPONSE_ERROR_WIRING        = 4; /** I2C bus failed to communicate - Please check your wiring. **/
  BUS_RESPONSE_UNSUPPORTED_SENSOR  = 5; /** WipperSnapper firmware is outdated and does not include the sensor type - Please update your WipperSnapper firmware. **/
  BUS_RESPONSE_DEVICE_INIT_FAIL    = 6; /** I2C device failed to initialize. **/
  BUS_RESPONSE_DEVICE_DEINIT_FAIL  = 7; /** I2C device failed to de-initialize. **/
}

/**
* I2CBusInit represents a  to
* initialize the I2C bus from the broker.
*/
message I2CBusInit {
  int32  i2c_pin_scl     = 1; /** The desired I2C SCL pin. */
  int32  i2c_pin_sda     = 2; /** The desired I2C SDA pin. */
  uint32 i2c_frequency   = 3; /** The desired I2C SCL frequency, in Hz. Default is 100000Hz. */
  int32  i2c_port_number = 4; /** The I2C port number. */
}

/**
* I2CBusInitResponse represents a response to I2CBusInit
*/
message I2CBusInitResponse {
  bool is_initialized  = 1 [deprecated = true, (nanopb).type = FT_IGNORE]; /** True if the I2C port has been initialized successfully, False otherwise. */
  BusResponse bus_response = 2; /** Whether the I2C bus initialized properly or failed. **/
}


/**
* I2CScan represents the parameters required to execute
* a device's I2C scan.
*/
message I2CScan {
  int32 i2c_port_number              = 1; /** The desired I2C port to scan. */
  I2CBusInit bus_init = 2; /** The I2C bus initialization . */
}

/**
* I2CScanResponse represents a list of I2C addresses
* found on the bus after I2CScan has executed.
*/
message I2CScanResponse {
  repeated uint32 addresses_found  = 1 [packed=true, (nanopb).max_count = 120]; /** The 7-bit addresses of the I2C devices found on the bus, empty if not found. */
  BusResponse bus_response         = 2; /** The I2C bus' status. **/
}

/**
* I2CSensorProperties contains
* the properties of an I2C device's sensor such as
* its type and period.
*/
message I2CSensorProperties {
  wippersnapper.sensor.v1.SensorType sensor_type = 1;
}

/**
* I2CInit is a wrapper message for
* an I2C device initialization .
*/
message I2CInit {
   int32  i2c_port_number                                    = 1; /** The desired I2C port to initialize an I2C device on. */
   I2CBusInit i2c_bus_init_req                        = 2; /** An I2C bus initialization . */
   uint32 i2c_device_address                                 = 3; /** The 7-bit I2C address of the device on the bus. */
   string i2c_device_name                                    = 4[(nanopb).max_size = 15]; /** The I2C device's name, MUST MATCH the name on the JSON definition file on https://github.com/adafruit/Wippersnapper_Components. */
   repeated wippersnapper.sensor.v1.SensorType sensor_type  = 5[(nanopb).max_count = 15]; /** Properties of each sensor on the I2C device. */
}

/**
* I2CAdded contains the response from a
* device after processing a I2CInit message.
*/
message I2CAdded {
  bool is_success             = 1 [deprecated = true, (nanopb).type = FT_IGNORE]; /** !!DEPRECATED!! True if i2c device initialized successfully, false otherwise. */
  uint32 i2c_device_address   = 2; /** The 7-bit I2C address of the device on the bus. */
  BusResponse bus_response    = 3; /** The I2C bus' status. **/
}


/**
* I2CUpdateResponse represents if an I2C device's
* sensor(s) is/are successfully updated.
*/
message I2CUpdateResponse {
  uint32 i2c_device_address   = 1; /** The 7-bit I2C address of the device which was updated. */
  bool is_success             = 2 [deprecated = true, (nanopb).type = FT_IGNORE]; /** !!DEPRECATED!! True if the update  succeeded, False otherwise. */
  BusResponse bus_response    = 3; /** The I2C bus' status. **/
}

/**
* I2CRemove is a wrapper message containing
* a deinitialization  for a specific i2c device.
*/
message I2CRemove {
  int32  i2c_port_number        = 1; /** The desired I2C port to de-initialize an I2C device on. */
  uint32 i2c_device_address     = 2; /** The 7-bit I2C address of the device on the bus. */
}

/**
* I2CRemoved represents if an I2C device's
* sensor(s) is/are successfully de-initialized.
*/
message I2CRemoved {
  bool is_success           = 1 [deprecated = true, (nanopb).type = FT_IGNORE]; /** True if the deinitialization  succeeded, False otherwise. */
  uint32 i2c_device_address = 2; /** The 7-bit I2C address of the device which was initialized. */
  BusResponse bus_response  = 3; /** The I2C bus' status. **/
}


/**
* Each I2CEvent represents data from **one** I2C sensor.
* NOTE: An I2CEvent can have multiple sensor events if
* the I2C device contains > 1 sensor.
*/
message I2CEvent {
  uint32 sensor_address              = 1; /** The 7-bit I2C address of the I2C device. */
  repeated wippersnapper.sensor.v1.SensorEvent sensor_event  = 2[(nanopb).max_count = 15]; /** A, optionally repeated, SensorEvent from a sensor. */
}
